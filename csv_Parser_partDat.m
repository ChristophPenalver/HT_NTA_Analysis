function [ data_partDat ] = xlsx_Parser( inpath_partDat,infile_partDat,Ex )
%XLSX_PARSER Parse xlsx file to array
%   Loads the input Excel File(important convert to xlsx beforehand) 

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Du\Desktop\Promotion\LM-10\Messungen\Simone Partikel\2017_12_19\Simone Cluster\Single particle\M1_1_1000 2017-12-19 13-48-49_ParticleData.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/01/11 10:56:55

%% Initialize variables.
filename_partDat = [infile_partDat,inpath_partDat];
% filename_partDat = [inpath_partDat,infile_partDat];
% filename = 'C:\Users\Du\Desktop\Promotion\LM-10\Messungen\Simone Partikel\2017_12_19\Simone Cluster\Single particle\M1_1_1000 2017-12-19 13-48-49_ParticleData.csv';
delimiter = ',';
if Ex == 5 
    startRow = 2;
else
    startRow = 1;
end
%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: categorical (%C)
% For more information, see the TEXTSCAN documentation.
if Ex == 5
    formatSpec = '%f%f%f%f%f%f%C%[^\n\r]';
else
    formatSpec = '%f%f%f%f%f%f%[^\n\r]';
end
%% Open the text file.
fileID = fopen(filename_partDat,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
if Ex == 5
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType',...
    'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError',...
    false, 'EndOfLine', '\r\n');
else
    dataArray = textscan(fileID, formatSpec, 'Delimiter',...
    delimiter, 'TextType', 'string', 'EmptyValue', NaN,...
    'ReturnOnError', false);
end
%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
% res = table(dataArray{1:end-1}, 'VariableNames'...
%     , {'ParticleID','Sizenm','Diffusioncoefficientnm2s1','LnAdjustedintensityAU',...
%     'Startframe','Tracklength','Includedindistribution'});
% 
% vars = {'ParticleID','Sizenm','Diffusioncoefficientnm2s1','LnAdjustedintensityAU',...
% 'Startframe','Tracklength'};
% data_ind = table2array(res(1:end,vars));
% true = res.Includedindistribution;
% exc = true == 'True';
% data_partDat = [data_ind,exc];
if Ex == 5
    res = table(dataArray{1:end-1}, 'VariableNames'...
    , {'ParticleID','Sizenm','Diffusioncoefficientnm2s1','LnAdjustedintensityAU',...
    'Startframe','Tracklength','Includedindistribution'});

    vars = {'ParticleID','Sizenm','Diffusioncoefficientnm2s1','LnAdjustedintensityAU',...
    'Startframe','Tracklength'};
    data_ind = table2array(res(1:end,vars));
    true = res.Includedindistribution;
    exc = true == 'True';
    data_partDat = [data_ind,exc];
else
    res = table(dataArray{1:end-1}, 'VariableNames'...
    , {'ParticleID','Sizenm','Diffusioncoefficientnm2s1','LnAdjustedintensityAU',...
    'Startframe','Tracklength'});
    vars = {'ParticleID','Sizenm','Diffusioncoefficientnm2s1','LnAdjustedintensityAU',...
    'Startframe','Tracklength'};
    data_ind = table2array(res(1:end,vars));
    data_partDat = data_ind;
end

%% Clear temporary variables
clearvars filename_partDat delimiter startRow formatSpec fileID dataArray ans;

% read xlsx
% folder = path;
% filetype = '*.xlsx';
% f = fullfile(folder,filetype);
% d = dir(f);
% raw_data = xlsread(fullfile(folder,file));
% [~,txt,~] = xlsread(fullfile(folder,file));
% % raw_data = xlsread(file); 
% % [~,txt,~] = xlsread(file);
% 
% % header = txt(1,:);
% ID = raw_data(:,1);
% diameter = raw_data(:,2);
% difCoe = raw_data(:,3);
% frame = raw_data(:,4);
% X = raw_data(:,5);
% Y = raw_data(:,6);
% intensity = raw_data(:,7);
% 
% % true_test = raw_data (:,8);
% true = txt(:,8);
% true (1) = [];
% 
% %% convert true/ false in 1/ 0
% incl =[];
% tr = 'True';
% for yy = 1:1:length(true)
%     new_tr = strcmp(true{yy,1},tr);
%     incl = [incl;new_tr];
% end
% % for yy = 1:1:length(txt)
% %     new_tr = strcmp(txt{yy,1},tr);
% %     incl = [incl;new_tr];
% % end
% data=[ID,X,Y,frame,difCoe,diameter,intensity,incl];
end
